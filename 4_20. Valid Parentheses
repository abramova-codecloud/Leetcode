/**
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

    Open brackets must be closed by the same type of brackets.
    Open brackets must be closed in the correct order.

Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true

Example 2:

Input: "()[]{}"
Output: true

Example 3:

Input: "(]"
Output: false

Example 4:

Input: "([)]"
Output: false

Example 5:

Input: "{[]}"
Output: true

*/

MY SOLUTION:
Runtime: 1 ms, faster than 98.84% of Java online submissions for Valid Parentheses.
Memory Usage: 37.8 MB, less than 31.59% of Java online submissions for Valid Parentheses.

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack();
        for (char c : s.toCharArray()) {
            if (stack.empty()) {
                if (c == '(' || c == '{' || c == '[') {
                    stack.push(c);
                } else return false; 
                continue;
            } 
            char p = stack.peek();
            if (p == '(' && c == ')') stack.pop();
            else if (p == '{' && c == '}') stack.pop();
            else if (p == '[' && c == ']') stack.pop();
            else stack.push(c);            
        }        
        if (stack.empty()) return true;
        return false;
    }
}