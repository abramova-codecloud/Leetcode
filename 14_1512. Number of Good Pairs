/**
Given an array of integers nums.
A pair (i,j) is called good if nums[i] == nums[j] and i < j.
Return the number of good pairs.

 
Example 1:
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

MY SOLUTION:
Runtime: 2 ms, faster than 42.17% of Java online submissions for Number of Good Pairs.
Memory Usage: 38.6 MB, less than 100.00% of Java online submissions for Number of Good Pairs.
*/

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int k = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = 1; j < nums.length; j++) {
                if (nums[i] == nums[j] && i<j) 
                    k++;
            }
        }
        return k;
    }
}


class Solution {
    public int numIdenticalPairs(int[] nums) {
         int k = 0;
         int[] nuts = new int[101];
         for (int n: nums) {
             nuts[n]++;
         }
         for (int i = 0; i < nuts.length; i++) {
             k = k + (nuts[i])*(nuts[i] - 1)/2;
         }
         return k;
    }
}